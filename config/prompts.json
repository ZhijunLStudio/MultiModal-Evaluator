{
  "prompt4": "Please extract and structure all connection relationships from this diagram. Begin with 'maingraph' and list all connections using the appropriate symbols:\n- -> for directed connections\n- -- for undirected connections\n- <-> for bidirectional connections\n\nIf a connection has a label, represent it as: Component1 -> Component2[\"label\"=\"label_text\"]",
  
  "prompt5": "Document this diagram's connectivity using the standard format.",

  "prompt6": "Using the standard syntax, map out the nodes, edges, and any subgraph structures from this circuit diagram. Include explicit sections for hierarchy and textual descriptions of simplifications.",

"grading_prompt_zh": "# 连接关系语义匹配分析\n\n## 任务描述\n请查看未被正则表达式匹配的连接关系，识别哪些实际表示相同的组件连接。这是一个理解任务，需要您判断节点名称的语义等价性。\n\n## 连接符号说明\n在连接关系分析中，连接符号具有明确的语义区别：\n- **单箭头(->)**: 表示有向连接，A->B 表示从A到B的方向连接\n- **双连字符(--)**: 表示无向连接，A--B 表示A和B之间的无向连接\n- **双向箭头(<->)**: 表示双向连接，A<->B 表示A和B之间的双向连接\n\n**重要规则：连接符号类型必须严格匹配**。例如，A->B 与 A--B 表示不同的连接关系，不应被视为匹配，即使节点名称相似。\n\n## 分析指南\n请仅在满足以下所有条件时认为两个连接是匹配的：\n1. **连接符号完全相同**：必须是相同类型的连接（-> 与 ->，-- 与 --，<-> 与 <->）\n2. **节点名称语义等价**：连接的节点在功能和角色上是对应的\n   - 例如：\"ADC\"和\"模数转换器\"可视为等价\n   - 例如：\"Comparator\"与\"比较器\"或\"Comp\"可视为等价\n\n## 输出格式\n请以JSON格式输出结果，遵循以下结构：\n```json\n{\n  \"semantic_matches\": [\n    {\"generated\": \"Node1 -> Node2\", \"reference\": \"NodeA -> NodeB\"},\n    {\"generated\": \"Node3 -- Node4\", \"reference\": \"NodeC -- NodeD\"}\n  ],\n  \"match_count\": 2\n}\n```\n\n## 示例\n正确的匹配：\n- 生成：`ControlUnit -> IOInterface`，参考：`控制单元 -> I/O接口` (节点名称不同但语义相似，连接符号相同)\n\n不匹配的情况：\n- 生成：`ControlUnit -> IOInterface`，参考：`控制单元 -- I/O接口` (连接符号不同，不应匹配)\n\n请严格按照以上标准分析未匹配连接，只匹配那些节点语义相似且连接符号相同的情况。",

"grading_prompt_en": "# Connection Relationship Semantic Matching Analysis\n\n## Task Description\nPlease examine the unmatched connections and identify which ones actually represent the same component relationships. This is an understanding task requiring you to judge the semantic equivalence of node names.\n\n## Connection Symbols Explanation\nIn connection relationship analysis, connection symbols have distinct semantic meanings:\n- **Single arrow (->)**: Represents a directed connection from source to target\n- **Double dash (--)**: Represents an undirected connection between components\n- **Bidirectional arrow (<->)**: Represents a bidirectional connection\n\n**Important rule: Connection symbol types must strictly match**. For example, A->B and A--B represent different connection relationships and should not be considered a match, even if the node names are similar.\n\n## Analysis Guidelines\nOnly consider two connections as matching when ALL of the following conditions are met:\n1. **Connection symbols are identical**: Must be the same type of connection (-> with ->, -- with --, <-> with <->)\n2. **Node names are semantically equivalent**: The connected nodes correspond in function and role\n   - Example: \"ADC\" and \"Analog-Digital Converter\" can be considered equivalent\n   - Example: \"Comparator\" and \"Comp\" can be considered equivalent\n\n## Output Format\nPlease output your results in JSON format following this structure:\n```json\n{\n  \"semantic_matches\": [\n    {\"generated\": \"Node1 -> Node2\", \"reference\": \"NodeA -> NodeB\"},\n    {\"generated\": \"Node3 -- Node4\", \"reference\": \"NodeC -- NodeD\"}\n  ],\n  \"match_count\": 2\n}\n```\n\n## Examples\nCorrect matches:\n- Generated: `ControlUnit -> IOInterface`, Reference: `Control Unit -> I/O Interface` (different node names but semantically similar, same connection symbol)\n\nNot matches:\n- Generated: `ControlUnit -> IOInterface`, Reference: `Control Unit -- I/O Interface` (different connection symbols, should not match)\n\nPlease strictly follow these standards when analyzing unmatched connections, only matching those with semantically similar nodes AND identical connection symbols."


}
